#include <iostream>
#include <cmath>

/*Problem 12

Highly divisible triangular number


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


Answer:	76576500
 */

unsigned getDivisorCount(unsigned long n) {

    unsigned long root = sqrt(n);

    //First potential divisor is 2, since 1 (and n) are always divisors.
    unsigned long divisor = 2;
    unsigned divisorCount = 2;

    while (divisor < root) {
        if (n % divisor == 0) {
                divisorCount += 2;
            }
        ++divisor;
    }

    // Check if n is a perfect square.
    if (root*root == n) {
        ++divisorCount;
    }

    return divisorCount;
}
 
 

unsigned long problem_012() {

    unsigned long n = 1;
    unsigned divisorCount = 1;

    unsigned divisorCount_0 = 1;
    unsigned divisorCount_1 = 2;
    
    while (divisorCount <= 500) {

        ++n;

        // divisorCount_0 = divisorCount_1;
        // divisorCount_1 = getDivisorCount(n+1);

        // Something like this ???
        // divisorCount = divisorCount_0 * divisorCount_1 - 1;     

        divisorCount = getDivisorCount( n*(n+1)/2 );
    }
	
    return n*(n+1)/2;	
}

int main() {
	
   	std::cout << problem_012() << std::endl;

    return 0;
}
